配置name,email属性
git config --global user.name "名字"
git config --global user.email "email"


git init   -初始化仓库，该文件夹是否被git管理
git status  -查看当前文件夹状态


未跟踪：刚添加的文件夹(U)
暂存:仓库中的文件和本地文件内容不一样(M)
未修改:仓库和本地文件夹内容一样()
修改：将未修改的文件夹再次更改即可变为修改状态(M)


git add<filename> =>未跟踪变为暂存状态
		---->git add * 将所有已修改或者未跟踪的文件变为暂存状态

git commit -m "xxx"  将暂存的文件夹存储到仓库中
git commit -a -m "xxx"  提交所有已经修改的文件（除未跟踪的文件）



git restore  重置文件（将文件变为最后一个commit状态）
git restore --staged<filename>将文件从删除状态变为暂存状态

git rm<filename> 删除文件，删除后文件会变成一个暂存删除状态，提交后即可仓库和本地都消失
git rm<filename> -f 强制删除文件, 修改状态下无法普通删除

git 在存储文件时，每一次代码提交都会创建一个节点，节点会构成一个树状结构，树状结构即存在分支，默认情况下仓库只有一个分支命名为master，可以创建多个分支，分支与分支之间互不干扰
git branch 查看当前分支
git branch <branch name> 创建新的分支
git branch -d <branch name> 删除分支
git switch <branch name>切换分支
git switch -c <branch name> 创建并切换分支
git merger<branch name > 合并分支

变基（rebase）
发起变基时会找到两个分支最近的祖先，对比祖先的历史提交，并将它们提取存储到一个临时文件中，将该分支基底指向目标基地，再执行快速合并，会使代码变得清晰明了

GitHub使用
git remote add origin(远方仓库名字) url(远方仓库地址)
git branch -M main   修改分支的名字为main
git push -u origin main  将代码上传到服务器上


码云使用方法
git remote gitee url
git push -u gitee main


git remote 列出当前关联的远程库
git remote add <远程库名> <url> 关联远程仓库
git remote remove <远程库名> 删除远程库
git push -u <远程库名 <分支名> 向远程库推送代码，并和当前分支关联(一次即可，后续可直接push)
git clone <url> ："别名"  从远程库下载代码，冲突时可指定别名
git push orgin mymaster:yourmaster 如果本地库版本低于远程库，push默认是推不上去的( 将我的mymaster推送给服务器的yourmaster分支)
git fetch  需要确保远程库和本地库一致才能推送成功,fetch会从远程库下载所有代码，但是不会自动和当前分支合并，所以需要手动merge
git pull  从服务器上拉取代码并自动合并 (fetch的升级版)


tag标签
		当出现分离头指针时（HEAD detached），该状态下操作代码不会出现任何的效果，此时需要在当前节点先创建分支然后再操作
git switch -c <分支名> <commit id>
		查询id太过复杂就可以通过标签快速的识别出不同的开发节点
		git tag
		git tag <标签名>
		git tag <标签名 提交id
		git push <远程仓库> 标签名
		git push 远程仓库 --tags  将所有的标签添加到远程库
		git tag -d  标签名  删除本地标签
		git push 远程仓库 --delete 标签名 删除远程标签

gitignore  通过在项目中添加该文件，可以将一些不希望被git监视的文件不被提交，文件类直接写不希望添加的文件名即可